//Time Complexity: O(N^3)
//Space Complexity: O(N^2)

class Solution
{
    public:
        void setZeroes(vector<vector < int>> &matrix)
        {
            int n = matrix.size();
            int m = matrix[0].size();
            vector<vector < int>> visited(n, vector<int> (m, 1));

            for (int i = 0; i < n; i++)
            {
                for (int j = 0; j < m; j++)
                {
                    if (matrix[i][j] == 0 && visited[i][j] != 0)
                    {
                       	//Now fill zeroes in rows
                        for (int c = j - 1; c >= 0; c--)
                        {
                            if (matrix[i][c] != 0)
                            {
                                matrix[i][c] = 0;
                                visited[i][c] = 0;
                            }
                        }

                        for (int c = j + 1; c < m; c++)
                        {
                            if (matrix[i][c] != 0)
                            {
                                matrix[i][c] = 0;
                                visited[i][c] = 0;
                            }
                        }

                       	//Now fill zeroes in columns
                        for (int r = i - 1; r >= 0; r--)
                        {
                            if (matrix[r][j] != 0)
                            {
                                matrix[r][j] = 0;
                                visited[r][j] = 0;
                            }
                        }

                        for (int r = i + 1; r < n; r++)
                        {
                            if (matrix[r][j] != 0)
                            {
                                matrix[r][j] = 0;
                                visited[r][j] = 0;
                            }
                        }
                    }
                }
            }
        }
};
