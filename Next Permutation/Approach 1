//Time Complexity: O(N)
//Space Complexity: O(1)

class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        
      int index = -1;
      int n = nums.size();
      for(int i = n-1; i > 0; i--){
          //Means decreasing sequence ended here
          if(nums[i-1] < nums[i]){
              index = i-1;
              break;
          }
      }
      
      //If this is entirely a non-decreasing se
      if(index == -1){
          reverse(nums.begin(), nums.end());
          return;
      }
      
      //swap the captured index  
      for(int i = n-1; i > index; i--){
          if(nums[i] > nums[index]){
              int temp = nums[i];
              nums[i] = nums[index];
              nums[index] = temp;
              break;
          }
      }
        
      int i = index+1;
      int j = n-1;
        
      while(i<n && j>=0 && i < j){
          int temp = nums[i];
          nums[i] = nums[j];
          nums[j] = temp;
          i++;
          j--;
      }

    }
};
